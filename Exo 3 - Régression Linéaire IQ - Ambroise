# -*- coding: utf-8 -*-
"""Exo 3 - Régression Linéaire IQ

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AqgH-EY7EhGAzlq2EEshO6JEtx1jfnDO
"""

#utilisation du dataset IQ
# après des recherches sur internet, j'ai remarqué que tous conseillaient d'importer plus de bibliothèque que juste panda
#C'est pourquoi plus tard je vais importer différentes biblio
#dans ce dernier exercice j'ai eu énormément d'erreur de concole
#je me suis souvent référé à internet pour trouver des manières de contourner mes pb
#dans les commentaires du code, j'ai souvent référer aux erreurs
import pandas as pd

# la première lecture de data ne fonctionnait pas.
#puis en cherchant dans les données j'ai compris que c'était du à la première colonne qui contenait des lettres
#ainsi j'ai trouver la solution de rajouter encoding por résoudre ce pb sur internet
data = pd.read_csv("IQ_DataSet.csv", encoding="ISO-8859-1")

data.info()
data.head()

data.describe()

import seaborn as sb

#je m'inspire du modèle celsius de l'exo 1
sb.scatterplot(x = "education_expenditure", y = "IQ", data = data, hue = "IQ", palette = "coolwarm")

data["education_expenditure"]
x = data["education_expenditure"]
y = data["IQ"]
y,x
# permet de séparer data

#il faut reshape, en passant de x fonction à x en array
type(x)
type(y)

x.values

#maintenant on stock ces information d'array dans une nouvelle variable spécifique pour ça
x_processed = x.values.reshape(-1,1)
y_processed = y.values.reshape(-1,1)

#maintenant il faut creer un modele de ces nouyvelles variables

#je ne parvenais pas à faire fonctionner mon code, j'ai donc chercher des données et compris que mes colonnes avaient des trous

#Il y a des trous dans y et dans x donc :

y_processed_df = pd.DataFrame(y_processed)

# Vérifier les valeurs manquantes dans le DataFrame
y_missing_df = y_processed_df.isna()
print(y_missing_df)

#Il y a des trous dans x donc :

# Convertir les tableaux NumPy en DataFrame pandas
x_processed_df = pd.DataFrame(x_processed)

# Vérifier les valeurs manquantes dans le DataFrame
x_missing_df = x_processed_df.isna()
print(x_missing_df)

from sklearn.linear_model import LinearRegression
#recherche google sur la manière de faire
#on sécurise les valeurs manquantes
# Supprimer les lignes contenant des valeurs manquantes dans x et y
y_processed_df = y_processed_df.dropna()
x_processed_df = x_processed_df.dropna()

# Réinitialiser les index
y_processed_df = y_processed_df.reset_index(drop=True)
x_processed_df = x_processed_df.reset_index(drop=True)
# Verification des liens
x_processed = x_processed[:len(y_processed_df)]
y_processed = y_processed[:len(x_processed_df)]

#problème, avoirnnettoyé les tableaux créait un décalage entre les deux tableau donc :
# on regarde le nb d'échantillons
num_samples_x = x_processed_df.shape[0]
num_samples_y = y_processed_df.shape[0]

# deux tableaux ont le même nombre d'échantillons
if num_samples_x != num_samples_y:
    # ajuster les tableaux
    min_samples = min(num_samples_x, num_samples_y)
    x_processed_df = x_processed_df.iloc[:min_samples]
    y_processed_df = y_processed_df.iloc[:min_samples]

#former votre modèle avec les données nettoyées
model = LinearRegression()
model.fit(x_processed_df, y_processed_df)

#maintenant le modele a appris on peut lui demander de predire le IQ en donnant le education _expenditure
model.predict([[2800]])

model.score(x_processed_df, y_processed_df)
#si on a 1 ça veut dire qu'on a une relation parfaite entre les 2 variables
#ce qui veut dire que c un modele de regression lineaire, et que les données sont parfaites
#ce qui signifie que la relation entre les 2 valeurs est parfaite

#ici on voit que notre test est loin d'être parfait avec une valeur de 0.3
